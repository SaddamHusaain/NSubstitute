using Core.Configuration;
using Core.DatabaseOps;
using Core.DataContracts.Responses;
using Core.SYS_Classes;
using Core.SYS_Enums;
using Core.SYS_Interfaces;
using CoreInterfaces;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NodaTime.Text;
using NSubstitute;
using SCImplementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MockTests
{
    [TestClass]
    public class UT_SC_Org_Exceptions
    {
        #region Create_Org_Exception
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgException()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            

             IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------//----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return false;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithReadTimePeriodsForCalendarBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithReadResourceByIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_unknown;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.Unknown;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithReadTimePeriodsForResourceBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_FAIL;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithCreateTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRAdded.func_msg = ServiceResponse.status_unknown;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithCreateOrgExceptionResourceMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResIds = 1;
            listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRAddedRes.func_msg = ServiceResponse.status_unknown;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();
            
            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithCreateOrgExceptionCalendarMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRAddedCal.func_msg = ServiceResponse.status_unknown;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithCreateOrgExceptionRepeatMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_unknown;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithReadOrgCalendarByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrCalendar.func_msg = ServiceResponse.status_unknown;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithCreateRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_unknown;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithCalendarIdListResourceIdListNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResIds = 1;
            listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<ITSO>();
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });



            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCreateException mockDcCreateException = Substitute.For<IDcCreateException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();

            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();


            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcMapRepeatException mockDcMapRepeatExceptionD = Substitute.For<IDcMapRepeatException>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            int calIds = 1;
            listOfCalIds.Add(calIds);

            List<int> listOfResIds = Substitute.For<List<int>>();
            //int ResIds = 1;
            //listOfResIds.Add(ResIds);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcCreateException.resourceIdList = listOfResIds;
            mockDcCreateException.calendarIdList = listOfCalIds;
            mockDcCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateException.timeZoneIANA = "America/Boise";
            mockDcCreateException.repeatRuleOptions = mockListRepeatOptions;

            mockDcCreateException.coreProj = mockCoreProj;
            mockDcCreateException.cmd_user_id = 1;
            mockDcCreateException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateException, typeof(IDcCreateException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCreateException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCreateException.cmd_user_id, mockDcCreateException.orgId, ENUM_Core_Function.CF_createOrgException).Returns(x =>
                {
                    return true;
                });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();

            mockUtils.GenerateRepeatTimePeriods(mockDcCreateException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcCreateException.repeatRuleOptions[0], mockDcCreateException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcCreateException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockITSOTimePeriodCal.exceptionId = 1;
                mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();

            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                return mockDcrResourceComplete;
            });

            List<ITSO> mockListITSORes = Substitute.For<List<ITSO>>();
            ITSO mockITSORes = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoListRes = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSORes.start = mockDcCalendarTimeRange.start;
                mockITSORes.end = mockDcCalendarTimeRange.end;
                mockListITSORes.Add(mockITSORes);
                mockDcrTsoListRes.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListRes.timeScaleList = mockListITSORes;
                return mockDcrTsoListRes;
            });

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            mockListITSO.Add(mockITSO);

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<ITSO>>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return mockListITSO;
            });


            INewRecordId new_exception_id = Substitute.For<INewRecordId>();
            new_exception_id.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return new_exception_id;
            });


            mockCoreDb.Create_Exception(mockDcCreateException.coreProj, mockDcCreateException, new_exception_id).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                return mockDCRAdded;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();



            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();

            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });
            
            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception(mockDcCreateException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------
            
            
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Read_Org_Resource_Exception_Mappings_By_Resource_ID
        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgResourceExceptionMappingsByResourceID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readOrgResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;

            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(listOfResourceIds[0], IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgResourceExceptionMappingsByResourceIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readOrgResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgResourceExceptionMappingsByResourceIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readOrgResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return false;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgResourceExceptionMappingsByResourceIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();


            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_readOrgResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------


            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_Org_Calendar_Exception_Mappings_By_Calendar_ID
        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionMappingsByCalendarID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarId.coreProj = mockCoreProj;
            mockDcCalendarId.cmd_user_id = 1;
            mockDcCalendarId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarId, typeof(IDcCalendarId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarId.cmd_user_id, mockDcCalendarId.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionMappingsByCalendarID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Calendar_Exception_Mappings(mockDcCalendarId.coreProj, mockDcCalendarId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);

                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Calendar_Exception_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(listOfResourceIds[0], IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionMappingsByCalendarIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarId.coreProj = mockCoreProj;
            mockDcCalendarId.cmd_user_id = 1;
            mockDcCalendarId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarId, typeof(IDcCalendarId)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarId.cmd_user_id, mockDcCalendarId.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionMappingsByCalendarID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });
            mockCoreDb.Read_Calendar_Exception_Mappings(mockDcCalendarId.coreProj, mockDcCalendarId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);

                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Calendar_Exception_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionMappingsByCalendarIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcCalendarId.coreProj = mockCoreProj;
            mockDcCalendarId.cmd_user_id = 1;
            mockDcCalendarId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarId, typeof(IDcCalendarId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarId.cmd_user_id, mockDcCalendarId.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionMappingsByCalendarID).Returns(x =>
                {
                    return false;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });
            mockCoreDb.Read_Calendar_Exception_Mappings(mockDcCalendarId.coreProj, mockDcCalendarId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);

                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Calendar_Exception_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionMappingsByCalendarIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcCalendarId.coreProj = mockCoreProj;
            mockDcCalendarId.cmd_user_id = 1;
            mockDcCalendarId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarId, typeof(IDcCalendarId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarId.cmd_user_id, mockDcCalendarId.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionMappingsByCalendarID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Calendar_Exception_Mappings(mockDcCalendarId.coreProj, mockDcCalendarId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);

                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_Org_Calendar_Exception_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region  Read_All_Org_Exception_Resource_Mappings_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionResourceMappingsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionResourceMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });


            mockCoreDb.Read_Exception_Resource_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID, mockDcExceptionID, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(listOfResourceIds[0], IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionResourceMappingsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return false;
            });
            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionResourceMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Exception_Resource_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID, mockDcExceptionID, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionResourceMappingsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionResourceMappingsByExceptionID).Returns(x =>
                {
                    return false;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Exception_Resource_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID, mockDcExceptionID, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionResourceMappingsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionResourceMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_Exception_Resource_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID, mockDcExceptionID, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_All_Org_Exception_TSoIds_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllOrgExceptionTSOsByExceptionID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });
            mockCoreDb.Read_All_Exception_TSos(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId,  listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(listOfResourceIds[0], IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllOrgExceptionTSOsByExceptionID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });
            mockCoreDb.Read_All_Exception_TSos(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId,  listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllOrgExceptionTSOsByExceptionID).Returns(x =>
                {
                    return false;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });
            mockCoreDb.Read_All_Exception_TSos(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId,  listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, 
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllOrgExceptionTSOsByExceptionID).Returns(x =>
                {
                    return true;
                });
            List<int> listOfResourceIds = new List<int>();
            int ResourceId;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfResourceIds;
            });

            mockCoreDb.Read_All_Exception_TSos(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId, listOfResourceIds).Returns(x =>
            {
                ResourceId = 1;
                listOfResourceIds.Add(ResourceId);
                
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_Org_Exception_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgExceptionOptionsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readExceptionOptionsByExceptionID).Returns(x =>
                {
                    return true;
                });
            IException exceptionData = Substitute.For<IException>();

            mockCoreFactory.Exception(mockCoreProj).Returns(x =>
            {
                return exceptionData;
            });

            mockCoreFactory.DcExceptionID(mockDcExceptionID.coreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreDb.Read_ExceptionOptions(mockDcExceptionID.coreProj, mockDcExceptionID,  exceptionData).Returns(x =>
            {
                exceptionData.exceptionId = 4;
                exceptionData.creatorId = 2;
                exceptionData.exceptionTitle = "DemoTitle";
                exceptionData.timeZoneIANA = DateTime.Now.ToString();
                exceptionData.durationMilliseconds = DateTime.Now.Second;
                exceptionData.start = DateTime.Now.ToString();
                exceptionData.end = DateTime.Now.AddMinutes(58).ToString();
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockDcExceptionID.coreProj, mockDcExceptionID.cmd_user_id).Returns(x =>
            {
                return "Test@gmail.com";
            });

            IDcrException IDcrException = scOrgExceptions.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(exceptionData.exceptionId, IDcrException.exceptionId);
            Assert.AreEqual(exceptionData.creatorId, IDcrException.creatorId);
            Assert.AreEqual(exceptionData.exceptionTitle, IDcrException.exceptionTitle);
            Assert.AreEqual(exceptionData.durationMilliseconds, IDcrException.durationMilliseconds);
            Assert.AreEqual(exceptionData.start, IDcrException.start);
            Assert.AreEqual(exceptionData.end, IDcrException.end);
            //Assert.AreEqual("Test@gmail.com", IDcrException.creatorEmail);


            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrException.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrException.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgExceptionOptionsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readExceptionOptionsByExceptionID).Returns(x =>
                {
                    return true;
                });
            IException exceptionData = Substitute.For<IException>();
            mockCoreFactory.Exception(mockCoreProj).Returns(x =>
            {
                return exceptionData;
            });

            mockCoreFactory.DcExceptionID(mockDcExceptionID.coreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreDb.Read_ExceptionOptions(mockDcExceptionID.coreProj, mockDcExceptionID,  exceptionData).Returns(x =>
            {
                exceptionData.exceptionId = 4;
                exceptionData.creatorId = 2;
                exceptionData.exceptionTitle = "DemoTitle";
                exceptionData.timeZoneIANA = DateTime.Now.ToString();
                exceptionData.durationMilliseconds = DateTime.Now.Second;
                exceptionData.start = DateTime.Now.ToString();
                exceptionData.end = DateTime.Now.AddMinutes(58).ToString();
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockDcExceptionID.coreProj, mockDcExceptionID.cmd_user_id).Returns(x =>
            {
                return "Test@gmail.com";
            });

            IDcrException IDcrException = scOrgExceptions.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrException.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrException.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgExceptionOptionsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readExceptionOptionsByExceptionID).Returns(x =>
                {
                    return false;
                });
            IException exceptionData = Substitute.For<IException>();
            mockCoreFactory.Exception(mockCoreProj).Returns(x =>
            {
                return exceptionData;
            });

            mockCoreFactory.DcExceptionID(mockDcExceptionID.coreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreDb.Read_ExceptionOptions(mockDcExceptionID.coreProj, mockDcExceptionID,  exceptionData).Returns(x =>
            {
                exceptionData.exceptionId = 4;
                exceptionData.creatorId = 2;
                exceptionData.exceptionTitle = "DemoTitle";
                exceptionData.timeZoneIANA = DateTime.Now.ToString();
                exceptionData.durationMilliseconds = DateTime.Now.Second;
                exceptionData.start = DateTime.Now.ToString();
                exceptionData.end = DateTime.Now.AddMinutes(58).ToString();
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockDcExceptionID.coreProj, mockDcExceptionID.cmd_user_id).Returns(x =>
            {
                return "Test@gmail.com";
            });

            IDcrException IDcrException = scOrgExceptions.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrException.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrException.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgExceptionOptionsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readExceptionOptionsByExceptionID).Returns(x =>
                {
                    return true;
                });
            IException exceptionData = Substitute.For<IException>();

            mockCoreFactory.Exception(mockCoreProj).Returns(x =>
            {
                return exceptionData;
            });

            mockCoreFactory.DcExceptionID(mockDcExceptionID.coreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreDb.Read_ExceptionOptions(mockDcExceptionID.coreProj, mockDcExceptionID,  exceptionData).Returns(x =>
            {
                exceptionData.exceptionId = 4;
                exceptionData.creatorId = 2;
                exceptionData.exceptionTitle = "DemoTitle";
                exceptionData.timeZoneIANA = DateTime.Now.ToString();
                exceptionData.durationMilliseconds = DateTime.Now.Second;
                exceptionData.start = DateTime.Now.ToString();
                exceptionData.end = DateTime.Now.AddMinutes(58).ToString();
               
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.GetLoginNameFromUserID(mockDcExceptionID.coreProj, mockDcExceptionID.cmd_user_id).Returns(x =>
            {
                return "Test@gmail.com";
            });

            IDcrException IDcrException = scOrgExceptions.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrException.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrException.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Resource_Exception_Mappings_By_Resource_ID
        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgResourceExceptionMappingsByResourceID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            mockCoreDb.Delete_All_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgResourceExceptionMappingsByResourceIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            mockCoreDb.Delete_All_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgResourceExceptionMappingsByResourceIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return false;
                });

            mockCoreDb.Delete_All_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgResourceExceptionMappingsByResourceIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgResourceId.coreProj = mockCoreProj;
            mockDcOrgResourceId.cmd_user_id = 1;
            mockDcOrgResourceId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourceId, typeof(IDcOrgResourceId)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourceId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourceId.cmd_user_id, mockDcOrgResourceId.orgId, ENUM_Core_Function.CF_deleteAllResourceExceptionMappingsByResourceID).Returns(x =>
                {
                    return true;
                });

            mockCoreDb.Delete_All_Resource_Exception_Mappings(mockDcOrgResourceId.coreProj, mockDcOrgResourceId, mockDcOrgResourceId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Resource_Exception_Mappings_By_Resource_ID(mockDcOrgResourceId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();

            
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                Ids = 1;
                listOfIds.Add(Ids);
                mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdList.func_msg = ServiceResponse.status_ok;
                mockDcrIdList.ListOfIDs = listOfIds;
                return mockDcrIdList;
            });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();

            
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                TsoIds = 1;
                listOfTsoIds.Add(TsoIds);
                mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTsoIds.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                return mockDcrIdListTsoIds;
            });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();

                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
              {
                  mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.ok;
                  mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_ok;
                  return mockDCRDeleteTimePeriod;
              });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 TsoIds = 1;
                 listOfTsoIds.Add(TsoIds);
                 mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListTsoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                 return mockDcrIdListTsoIds;
             });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteTimePeriod;
             });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });


            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return false;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 TsoIds = 1;
                 listOfTsoIds.Add(TsoIds);
                 mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListTsoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                 return mockDcrIdListTsoIds;
             });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteTimePeriod;
             });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionIDWithReadAllOrgExceptionRepeatMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdList.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 TsoIds = 1;
                 listOfTsoIds.Add(TsoIds);
                 mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListTsoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                 return mockDcrIdListTsoIds;
             });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteTimePeriod;
             });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionIDWithReadAllOrgExceptionTSoIdsFilterByRepeatIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 TsoIds = 1;
                 listOfTsoIds.Add(TsoIds);
                 mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListTsoIds.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                 return mockDcrIdListTsoIds;
             });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteTimePeriod;
             });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionIDWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 TsoIds = 1;
                 listOfTsoIds.Add(TsoIds);
                 mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListTsoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                 return mockDcrIdListTsoIds;
             });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.Unknown;
                 mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_unknown;
                 return mockDCRDeleteTimePeriod;
             });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionRepeatMappingsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcExceptionRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionRepeatId;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionRepeatMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoIds;
            IDcrIdList mockDcrIdListTsoIds = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 TsoIds = 1;
                 listOfTsoIds.Add(TsoIds);
                 mockDcrIdListTsoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListTsoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListTsoIds.ListOfIDs = listOfTsoIds;
                 return mockDcrIdListTsoIds;
             });

            IDCR_Delete mockDCRDeleteTimePeriod = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteTimePeriod.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteTimePeriod;
             });

            mockCoreDb.Delete_All_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();

            
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
              {
                  ResMapExId = 1;
                  listOfResMapExIds.Add(ResMapExId);
                  mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                  mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                  mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                  return mockDcrIdListResMapEx;
              });

 
            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory);
            


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithInvalidParameter()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithPermissionDenied()
        {

            // ---------- Arrange--------------
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return false;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithReadAllTimePeriodsForExceptionFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_unknown;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.Unknown;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithReadAllTimePeriodsForResourceFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithDeleteTimePeriodResourceMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOExceptionTimePeriods = Substitute.For<List<ITSO>>();
            ITSO mockTSOExceptionTimePeriods = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOExceptionTimePeriods.exceptionId = 1;
                mockListTSOExceptionTimePeriods.Add(mockTSOExceptionTimePeriods);
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                mockExceptionTimePeriods.timeScaleList = mockListTSOExceptionTimePeriods;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionResourceMappingsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllOrgAppointmentResourceMappingsByAppointmentID).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockExceptionTimePeriods = Substitute.For<IDcrTsoList>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTimePeriods.func_msg = ServiceResponse.status_ok;
                mockExceptionTimePeriods.func_status = ENUM_Cmd_Status.ok;
                return mockExceptionTimePeriods;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;

            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ResMapExId = 1;
                listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcExceptionID.coreProj, mockDcExceptionID, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Exception_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                   mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                   return mockDCRDeleteExTsoMaps;
               });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();

            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteExResMaps;
            });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();

            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteExCalMaps;
            });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExCalMaps;
             });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return false;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExCalMaps;
             });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithDeleteAllExceptionTSOMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_unknown;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExCalMaps;
             });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithDeleteAllOrgExceptionRepeatMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------



            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_unknown;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExCalMaps;
             });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithDeleteAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_unknown;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExCalMaps;
             });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithDeleteAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExRepMaps;
             });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_unknown;
                 mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDCRDeleteExCalMaps;
             });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();


            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteOrgExceptionByExceptionID).Returns(x =>
                {
                    return true;
                });


            IDCR_Delete mockDCRDeleteExTsoMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExTsoMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExTsoMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExTsoMaps;
             });

            IDCR_Delete mockDCRDeleteExRepMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteExRepMaps.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteExRepMaps.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteExRepMaps;
            });

            IDCR_Delete mockDCRDeleteExResMaps = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteExResMaps.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteExResMaps.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteExResMaps;
             });

            IDCR_Delete mockDCRDeleteExCalMaps = Substitute.For<IDCR_Delete>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteExCalMaps.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteExCalMaps.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteExCalMaps;
            });


            mockCoreDb.Delete_Exception(mockDcExceptionID.coreProj, mockDcExceptionID.exceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Create_Org_Exception_Repeats_Mapping

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
           {
               return mockDcrException;
           });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                 IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                 mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                 mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                 mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                 return mockListIInstantStartStopRepeatTimePeriods;
             });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
           {
               mockDcrTSO.func_msg = ServiceResponse.status_ok;
               mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
               mockDcrTSO.repeatId = 1;
               return mockDcrTSO;
           });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
           {

               return ENUM_DB_Status.DB_SUCCESS;
           });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                 mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                 mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                 return mockDCRAddedCreateTimePeriod;
             });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                 IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                 mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                 mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                 mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                 return mockListIInstantStartStopRepeatTimePeriods;
             });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return false;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithReadResourceTSOsByResourceIDTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithReadTSoFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_unknown;
                mockDcrTSO.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithCreateTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_unknown;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithServerError()
        {
            
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_FAIL;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatsMappingWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatsException mockDcMapRepeatsException = Substitute.For<IDcMapRepeatsException>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();


            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();

            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarTSO mockDcCalendarTSO = Substitute.For<IDcCalendarTSO>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCreateTSO mockDcCreateTSO = Substitute.For<IDcCreateTSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepIds = 1;
            listOfRepIds.Add(RepIds);

            mockDcMapRepeatsException.repeatIds = listOfRepIds;
            mockDcMapRepeatsException.coreProj = mockCoreProj;
            mockDcMapRepeatsException.cmd_user_id = 1;
            mockDcMapRepeatsException.orgId = 43242;
            mockDcMapRepeatsException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatsException, typeof(IDcMapRepeatsException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatsException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatsException.cmd_user_id, mockDcMapRepeatsException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";


            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return mockDcrException;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.end = "2017-01-13T10:06:59.0000000Z";
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatsException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcrException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();


            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();


            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.repeatId = 1;
                return mockDcrTSO;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });

            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            repeatedExceptionRepeatMap.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatsException.coreProj, mockDcMapRepeatsException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> listTimeStartEnd = Substitute.For<List<ITimeStartEnd>>(); IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Create_TimePeriod(mockDcCreateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDCR_Added mockDCRAddedCreateTimePeriod = Substitute.For<IDCR_Added>();
                mockDCRAddedCreateTimePeriod.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCreateTimePeriod.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCreateTimePeriod;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCreateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcCreateTSO;
            });

            IDcrAddedList IDcrAddedList = scOrgExceptions.Create_Org_Exception_Repeats_Mapping(mockDcMapRepeatsException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrAddedList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrAddedList.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Create_Org_Exception_Repeat_Map
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMap()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
               {
                   return true;
               });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                 return mockDcrIdListRepMapExp;
             });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockListIInstantStartStop.Add(mockIInstantStartStop);
                 return mockListIInstantStartStop;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                  {
                      IdResTsos = 1;
                      listOfIdsResTsos.Add(IdResTsos);
                      mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                      return mockDcrIdListResTsos;
                  });
            
            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });
            
            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                 mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                 mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                 mockSecondDcrTSO.repeatId = 1;
                 mockSecondDcrTSO.tsoId = 1;
                 mockSecondDcrTSO.appointmentId = 1;
                 mockSecondDcrTSO.orgId = 1;
                 return mockSecondDcrTSO;
             });


            INewRecordId  repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockRepeatID,  repeatedExceptionRepeatMap).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            
            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCR_Added.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCR_Added.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return false;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCR_Added.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrRepeat.func_msg = ServiceResponse.status_unknown;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadAllOrgExceptionRepeatMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadResourceTSOsByResourceIDTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadOrgCalendarTSOsByCalendarIDAndTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------
            
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithReadTSoFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_unknown;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.Unknown;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithCreateOrgTimeScaleObjectsFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();


            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_unknown;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.Unknown;
                return mockDcrAddedList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCR_Added.func_msg);
            //---------- Assert----------------
        }

        
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionRepeatMapWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcMapRepeatException.coreProj = mockCoreProj;
            mockDcMapRepeatException.cmd_user_id = 1;
            mockDcMapRepeatException.orgId = 43242;
            mockDcMapRepeatException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcMapRepeatException, typeof(IDcMapRepeatException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcMapRepeatException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcMapRepeatException.cmd_user_id, mockDcMapRepeatException.orgId, ENUM_Core_Function.CF_createOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });

            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                return mockDcrRepeat;
            });


            IDcrIdList mockDcrIdListRepMapExp = Substitute.For<IDcrIdList>();
            List<int> listOfRepMapExp = Substitute.For<List<int>>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListRepMapExp.func_msg = ServiceResponse.status_ok;
                mockDcrIdListRepMapExp.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListRepMapExp.ListOfIDs = listOfRepMapExp;
                return mockDcrIdListRepMapExp;
            });

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GenerateRepeatTimePeriods(mockDcMapRepeatException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcrRepeat, mockDcrException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockListIInstantStartStop.Add(mockIInstantStartStop);
                return mockListIInstantStartStop;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();

            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });


            List<int> listOfIdsResTsos = Substitute.For<List<int>>();
            int IdResTsos;
            IDcrIdList mockDcrIdListResTsos = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_Resource_TSOs_By_Resource_ID_TimeRange(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IdResTsos = 1;
                listOfIdsResTsos.Add(IdResTsos);
                mockDcrIdListResTsos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResTsos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResTsos.ListOfIDs = listOfIdsResTsos;
                return mockDcrIdListResTsos;
            });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                listOfCalTSosIds.Add(CalTSosId);
                mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                return mockDcrIdListCalTSos;
            });

            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                IDcrTSO mockSecondDcrTSO = Substitute.For<IDcrTSO>();
                mockSecondDcrTSO.func_msg = ServiceResponse.status_ok;
                mockSecondDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockSecondDcrTSO.repeatId = 1;
                mockSecondDcrTSO.tsoId = 1;
                mockSecondDcrTSO.appointmentId = 1;
                mockSecondDcrTSO.orgId = 1;
                return mockSecondDcrTSO;
            });


            INewRecordId repeatedExceptionRepeatMap = Substitute.For<INewRecordId>();
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return repeatedExceptionRepeatMap;
            });

            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            mockCoreDb.Create_Exception_Repeat_Map(mockDcMapRepeatException.coreProj, mockDcMapRepeatException, mockDcMapRepeatException, repeatedExceptionRepeatMap).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();
            
            mockCoreSc.Create_Org_TimeScaleObjects(mockDcTsos, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_unknown;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.Unknown;
                return mockDcrAddedList;
            });

            

            mockUtils.GetConflictingTimePeriods(Arg.Any<List<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcTsos(mockCoreProj).Returns(x =>
            {
                return mockDcTsos;
            });

            IDCR_Added IDCR_Added = scOrgExceptions.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCR_Added.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCR_Added.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCR_Added.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Create_Org_Exception_Resource_Mapping
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRAdded.func_msg = ServiceResponse.status_ok;
                 mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRAdded;
             });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });

            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                  {
                      mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                      mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                      mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                      return mockDcrResourceComplete;
                  });


            

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });
            
            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }
                
            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();
         


            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
             {
                 return new List<IInstantStartStop>();
             });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });


            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       return mockDCRAdded;
                   });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                 mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                 return mockDcrResourceComplete;
             });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });


            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return false;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       return mockDCRAdded;
                   });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                 mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                 return mockDcrResourceComplete;
             });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       return mockDCRAdded;
                   });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                 mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                 return mockDcrResourceComplete;
             });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithReadAllTimePeriodsForExceptionFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            
            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_unknown;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });

            
            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       return mockDCRAdded;
                   });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                 mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                 return mockDcrResourceComplete;
             });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithCreateTimePeriodResourceMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockDCRAdded.func_msg = ServiceResponse.status_unknown;
                       mockDCRAdded.func_status = ENUM_Cmd_Status.Unknown;
                       return mockDCRAdded;
                   });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                 mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                 return mockDcrResourceComplete;
             });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {

                 return mockDcrException;

             });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockDCRAdded.func_msg = ServiceResponse.status_ok;
                       mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                       return mockDCRAdded;
                   });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceTSO, mockDcExceptionID,  newMapId).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
                    {
                        mockITSO.start = mockDcrException.start;
                        mockITSO.end = mockDcrException.end;
                        mockListITSO.Add(mockITSO);
                        mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoList.timeScaleList = mockListITSO;
                        return mockDcrTsoList;

                    });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                 mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                 mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
                 return mockDcrResourceComplete;
             });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });
            
            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithReadTimePeriodsForResourceBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAdded;
            });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceTSO, mockDcExceptionID, newMapId).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.start = mockDcrException.start;
                mockITSO.end = mockDcrException.end;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;

            });

            List<IInstantStartStop> mockListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop IInstantStartStop = Substitute.For<IInstantStartStop>();
            mockUtils.GetConflictingTimePeriods(IInstantStartStop, mockListIInstantStartStop).Returns(x =>
            {
                return mockListIInstantStartStop;
            });

            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                return mockDcrResourceComplete;
            });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithReadResourceByIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAdded;
            });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceTSO, mockDcExceptionID, newMapId).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.start = mockDcrException.start;
                mockITSO.end = mockDcrException.end;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;

            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_unknown;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                return mockDcrResourceComplete;
            });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();



            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionResourceMappingWithGetConflictingTimePeriodsFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;
            mockDcResourceException.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_createOrgResourceExceptionMappingByExceptionID).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockDcrException.func_status = ENUM_Cmd_Status.ok;
            mockDcrException.func_msg = ServiceResponse.status_ok;
            mockDcrException.creatorId = 1;
            mockDcrException.durationMilliseconds = DateTime.Now.Second;
            mockDcrException.exceptionId = 2;
            mockDcrException.exceptionTitle = "Demo Ex";
            mockDcrException.orgId = 1;
            mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
            //mockDcrException.creatorEmail = "xyz@gmail.com";
            mockDcrException.timeZoneIANA = "America/Boise";
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return mockDcrException;

            });


            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrExceptionTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListExceptionITSO = Substitute.For<List<ITSO>>();
            ITSO mockExceptionTSO = Substitute.For<ITSO>();

            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockExceptionTSO.start = mockDcrException.start;
                mockExceptionTSO.end = mockDcrException.end;
                mockListExceptionITSO.Add(mockExceptionTSO);
                mockDcrExceptionTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrExceptionTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrExceptionTSOs.timeScaleList = mockListExceptionITSO;

                return mockDcrExceptionTSOs;
            });


            IDCR_Added mockDCRAdded = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_TimePeriod_Resource_Map(mockDcResourceTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAdded.func_msg = ServiceResponse.status_ok;
                mockDCRAdded.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAdded;
            });

            INewRecordId newMapId = Substitute.For<INewRecordId>();
            newMapId.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMapId;
            });
            mockCoreDb.Create_Resource_Exception_Mapping(mockDcResourceException.coreProj, mockDcResourceTSO, mockDcExceptionID, newMapId).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.start = mockDcrException.start;
                mockITSO.end = mockDcrException.end;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;

            });


            IDcrResourceComplete mockDcrResourceComplete = Substitute.For<IDcrResourceComplete>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            mockCoreSc.Read_Resource_By_ID(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrResourceComplete.func_msg = ServiceResponse.status_ok;
                mockDcrResourceComplete.func_status = ENUM_Cmd_Status.ok;
                mockDcrResourceComplete.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
                return mockDcrResourceComplete;
            });

            mockCoreFactory.DcResourceTSO(mockCoreProj).Returns(x =>
            {
                return mockDcResourceTSO;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DCResourceTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDCResourceTimeRange;
            });


            IInstantStartStop IInstantStartStopExceptionTimePeriods = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopAlreadyAllocatedTimeRanges = Substitute.For<IInstantStartStop>();
            IInstantStartStop IInstantStartStopResourceTimeRanges = Substitute.For<IInstantStartStop>();
            int countIInstant = 0;
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (countIInstant == 0)
                {
                    countIInstant++;
                    return IInstantStartStopExceptionTimePeriods;
                }
                else if (countIInstant == 1)
                {
                    countIInstant++;
                    return IInstantStartStopAlreadyAllocatedTimeRanges;
                }
                else if (countIInstant == 2)
                {
                    countIInstant++;
                    return IInstantStartStopResourceTimeRanges;
                }

                else
                {
                    return IInstantStartStopExceptionTimePeriods;
                }

            });

            int countListIInstant = 0;
            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> alreadyAllocatedTimeRanges = Substitute.For<List<IInstantStartStop>>();


            alreadyAllocatedTimeRanges.Add(IInstantStartStopResourceTimeRanges);
            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return alreadyAllocatedTimeRanges;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstant == 0)
                {
                    countListIInstant++;
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstant == 1)
                {
                    return alreadyAllocatedTimeRanges;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Read_Resources_Exceptions_Between_TimeRange
        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRange()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            List<IExceptionComplete> mockListExceptionComplete = Substitute.For<List<IExceptionComplete>>();

            mockCoreFactory.ListExceptionComplete().Returns(x =>
            {
                return mockListExceptionComplete;
            });


            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockResourcesTso.appointmentId = 1;
                mockResourcesTso.exceptionId = 1;
                mockListResourcesTso.Add(mockResourcesTso);
                mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                return mockDcrResourcesTsoList;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                  mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrResourceExceptionCompleteList.func_msg);
            Assert.AreEqual(mockDcrException.creatorId, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].creatorId);
            Assert.AreEqual(mockDcrException.durationMilliseconds, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].durationMilliseconds);
            Assert.AreEqual(mockDcrException.exceptionId, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].exceptionId);
            Assert.AreEqual(mockDcrException.exceptionTitle, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].exceptionTitle);
            Assert.AreEqual(mockDcrException.orgId, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].orgId);
            Assert.AreEqual(mockDcrException.start, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].start);
            Assert.AreEqual(mockDcrException.end, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].end);
            //Assert.AreEqual(mockDcrException.creatorEmail, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].creatorEmail);
            Assert.AreEqual(1, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].calendarIdList[0]);
            Assert.AreEqual(1, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].resourceIdList[0]);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRangeWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockResourcesTso.appointmentId = 1;
                        mockResourcesTso.exceptionId = 1;
                        mockListResourcesTso.Add(mockResourcesTso);
                        mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                        return mockDcrResourcesTsoList;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrResourceExceptionCompleteList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRangeWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();


            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------
            
            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return false;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockResourcesTso.appointmentId = 1;
                        mockResourcesTso.exceptionId = 1;
                        mockListResourcesTso.Add(mockResourcesTso);
                        mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                        return mockDcrResourcesTsoList;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrResourceExceptionCompleteList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRangeWithReadTimePeriodsForResourcesBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();


            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockResourcesTso.appointmentId = 1;
                        mockResourcesTso.exceptionId = 1;
                        mockListResourcesTso.Add(mockResourcesTso);
                        mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.Unknown;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_unknown;
                        mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                        return mockDcrResourcesTsoList;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRangeWithReadOrgExceptionOptionsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockResourcesTso.appointmentId = 1;
                        mockResourcesTso.exceptionId = 1;
                        mockListResourcesTso.Add(mockResourcesTso);
                        mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                        return mockDcrResourcesTsoList;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrException.func_msg = ServiceResponse.status_unknown;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRangeWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();


            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockResourcesTso.appointmentId = 1;
                        mockResourcesTso.exceptionId = 1;
                        mockListResourcesTso.Add(mockResourcesTso);
                        mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                        return mockDcrResourcesTsoList;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadResourcesExceptionsBetweenTimeRangeWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcOrgResourcesTimeRange mockDcOrgResourcesTimeRange = Substitute.For<IDcOrgResourcesTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourcesTimeRange mockResourcesTimeRange = Substitute.For<IResourcesTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDcOrgResourcesTimeRange.coreProj = mockCoreProj;
            mockDcOrgResourcesTimeRange.cmd_user_id = 1;
            mockDcOrgResourcesTimeRange.orgId = 43242;

            List<int> listOfResIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResIds.Add(ResId);
            mockDcOrgResourcesTimeRange.resourceIdList = listOfResIds;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgResourcesTimeRange, typeof(IDcOrgResourcesTimeRange)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcOrgResourcesTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcOrgResourcesTimeRange.cmd_user_id, mockDcOrgResourcesTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrResourcesTsoList mockDcrResourcesTsoList = Substitute.For<IDcrResourcesTsoList>();

            Dictionary<int, List<ITSO>> mockDicResourcesTsoList = Substitute.For<Dictionary<int, List<ITSO>>>();
            List<ITSO> mockListResourcesTso = Substitute.For<List<ITSO>>();
            ITSO mockResourcesTso = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resources_Between_DateTime(mockDcOrgResourcesTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockResourcesTso.appointmentId = 1;
                        mockResourcesTso.exceptionId = 1;
                        mockListResourcesTso.Add(mockResourcesTso);
                        mockDicResourcesTsoList.Add(1, mockListResourcesTso);
                        mockDcrResourcesTsoList.func_status = ENUM_Cmd_Status.ok;
                        mockDcrResourcesTsoList.func_msg = ServiceResponse.status_ok;
                        mockDcrResourcesTsoList.resourceTSOList = mockDicResourcesTsoList;
                        return mockDcrResourcesTsoList;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;

             });
            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resources_Exceptions_Between_TimeRange(mockDcOrgResourcesTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Read_Resource_Exceptions_Between_TimeRange
        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRange()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            List<IExceptionComplete> mockListExceptionComplete  = Substitute.For<List<IExceptionComplete>>();

            mockCoreFactory.ListExceptionComplete().Returns(x =>
            {
                return mockListExceptionComplete;
            });


            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockITSOTimePeriodRes.exceptionId = 1;
                 mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                 mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                 return mockDcrTsoListTimePeriodRes;
             });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrResourceExceptionCompleteList.func_msg);
            Assert.AreEqual(mockDcrException.creatorId, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].creatorId);
            Assert.AreEqual(mockDcrException.durationMilliseconds, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].durationMilliseconds);
            Assert.AreEqual(mockDcrException.exceptionId, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].exceptionId);
            Assert.AreEqual(mockDcrException.exceptionTitle, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].exceptionTitle);
            Assert.AreEqual(mockDcrException.orgId, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].orgId);
            Assert.AreEqual(mockDcrException.start, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].start);
            Assert.AreEqual(mockDcrException.end, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].end);
            //Assert.AreEqual(mockDcrException.creatorEmail, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].creatorEmail);
            Assert.AreEqual(1, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].calendarIdList[0]);
            Assert.AreEqual(1, IDcrResourceExceptionCompleteList.listOfExceptionCompletes[0].listOfExceptionCompletes[0].resourceIdList[0]);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRangeWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                 mockITSOTimePeriodRes.exceptionId = 1;
                 mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                 mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                 mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                 mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                 return mockDcrTsoListTimePeriodRes;
             });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrResourceExceptionCompleteList.func_msg);



            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRangeWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return false;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                        mockITSOTimePeriodRes.exceptionId = 1;
                        mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                        mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                        return mockDcrTsoListTimePeriodRes;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrResourceExceptionCompleteList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRangeWithReadTimePeriodsForResourceBetweenDateTimeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                        mockITSOTimePeriodRes.exceptionId = 1;
                        mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                        mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.Unknown;
                        mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_unknown;
                        mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                        return mockDcrTsoListTimePeriodRes;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRangeWithReadOrgExceptionOptionsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                        mockITSOTimePeriodRes.exceptionId = 1;
                        mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                        mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                        return mockDcrTsoListTimePeriodRes;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrException.func_msg = ServiceResponse.status_unknown;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRangeWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                        mockITSOTimePeriodRes.exceptionId = 1;
                        mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                        mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                        return mockDcrTsoListTimePeriodRes;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);


            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_Read_ResourceExceptionsBetweenTimeRangeWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IResourceExceptionComplete mockResourceExceptionComplete = Substitute.For<IResourceExceptionComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IExceptionComplete mockExceptionComplete = Substitute.For<IExceptionComplete>();

            mockDCResourceTimeRange.coreProj = mockCoreProj;
            mockDCResourceTimeRange.cmd_user_id = 1;
            mockDCResourceTimeRange.orgId = 43242;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.ExceptionComplete().Returns(x => {

                return mockExceptionComplete;
            });

            mockValid.Is_Valid(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCResourceTimeRange, typeof(IDCResourceTimeRange)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDCResourceTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDCResourceTimeRange.cmd_user_id, mockDCResourceTimeRange.orgId, ENUM_Core_Function.CF_readResourceExceptionBetweenTimeRange).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodRes = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Resource_Between_DateTime(mockDCResourceTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                        mockITSOTimePeriodRes.exceptionId = 1;
                        mockListITSOTimePeriodRes.Add(mockITSOTimePeriodRes);
                        mockDcrTsoListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                        mockDcrTsoListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                        mockDcrTsoListTimePeriodRes.timeScaleList = mockListITSOTimePeriodRes;
                        return mockDcrTsoListTimePeriodRes;
                    });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResMapId = 1;
            listOfResMapIds.Add(ResMapId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                 return mockDcrIdListResMap;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrResourceExceptionCompleteList IDcrResourceExceptionCompleteList = scOrgExceptions.Read_Resource_Exceptions_Between_TimeRange(mockDCResourceTimeRange,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrResourceExceptionCompleteList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrResourceExceptionCompleteList.func_msg);


            //---------- Assert----------------
        }


        #endregion

        #region Read_Org_Calendar_Exceptions_Between_TimeRange
        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRange()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });


            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
           

            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                return mockDcrRepeat;
            });




            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrCalendarExceptionList.func_msg);
            Assert.AreEqual(mockDcrException.creatorId, IDcrCalendarExceptionList.listOfExceptionCompletes[0].creatorId);
            Assert.AreEqual(mockDcrException.durationMilliseconds, IDcrCalendarExceptionList.listOfExceptionCompletes[0].durationMilliseconds);
            Assert.AreEqual(mockDcrException.exceptionId, IDcrCalendarExceptionList.listOfExceptionCompletes[0].exceptionId);
            Assert.AreEqual(mockDcrException.exceptionTitle, IDcrCalendarExceptionList.listOfExceptionCompletes[0].exceptionTitle);
            Assert.AreEqual(mockDcrException.orgId, IDcrCalendarExceptionList.listOfExceptionCompletes[0].orgId);
            Assert.AreEqual(mockDcrException.start, IDcrCalendarExceptionList.listOfExceptionCompletes[0].start);
            Assert.AreEqual(mockDcrException.end, IDcrCalendarExceptionList.listOfExceptionCompletes[0].end);
            Assert.AreEqual(1, IDcrCalendarExceptionList.listOfExceptionCompletes[0].calendarIdList[0]);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithInvalidParameter()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithPermissionDenied()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return false;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithReadTimePeriodsForCalendarBetweenDateTimeFuncStatusNotOk()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                       mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithReadOrgExceptionOptionsByExceptionIDFuncStatusNotOk()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrException.func_msg = ServiceResponse.status_unknown;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithReadAllOrgExceptionRepeatMappingsByExceptionIDFuncStatusNotOk()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdList.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.ok;
                 mockDcrRepeat.func_msg = ServiceResponse.status_ok;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_ReadOrgCalendarExceptionsBetweenTimeRangeWithReadRepeatFuncStatusNotOk()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ICalendarTimeRange mockCalendarTimeRange = Substitute.For<ICalendarTimeRange>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarTimeRange.coreProj = mockCoreProj;
            mockDcCalendarTimeRange.cmd_user_id = 1;
            mockDcCalendarTimeRange.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcRepeatId(mockCoreProj).Returns(x =>
            {
                return mockDcRepeatId;
            });

            mockValid.Is_Valid(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarTimeRange, typeof(IDcCalendarTimeRange)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarTimeRange.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarTimeRange.cmd_user_id, mockDcCalendarTimeRange.orgId, ENUM_Core_Function.CF_readOrgCalendarExceptionsBetweenDateTime).Returns(x =>
                {
                    return true;
                });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSOTimePeriodCal = Substitute.For<List<ITSO>>();
            ITSO mockITSOTimePeriodCal = Substitute.For<ITSO>();

            mockCoreSc.Read_TimePeriods_For_Calendar_Between_DateTime(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {

                       mockITSOTimePeriodCal.exceptionId = 1;
                       mockListITSOTimePeriodCal.Add(mockITSOTimePeriodCal);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSOTimePeriodCal;
                       return mockDcrTsoList;
                   });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.creatorId = 1;
                 mockDcrException.durationMilliseconds = DateTime.Now.Second;
                 mockDcrException.exceptionId = 2;
                 mockDcrException.exceptionTitle = "Demo Ex";
                 mockDcrException.orgId = 1;
                 mockDcrException.start = DateTime.Now.ToString();
                 mockDcrException.end = DateTime.Now.AddHours(2).ToString();
                //mockDcrException.creatorEmail = "xyz@gmail.com";
                return mockDcrException;
             });

            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfIds = Substitute.For<List<int>>();
            int Ids;
            IDcrIdList mockDcrIdList = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 Ids = 1;
                 listOfIds.Add(Ids);
                 mockDcrIdList.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdList.func_msg = ServiceResponse.status_ok;
                 mockDcrIdList.ListOfIDs = listOfIds;
                 return mockDcrIdList;
             });


            IDcrRepeat mockDcrRepeat = Substitute.For<IDcrRepeat>();
            
            mockCoreSc.Read_Repeat(mockDcRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrRepeat.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrRepeat.func_msg = ServiceResponse.status_unknown;
                 return mockDcrRepeat;
             });



            IDcrCalendarExceptionList IDcrCalendarExceptionList = scOrgExceptions.Read_Org_Calendar_Exceptions_Between_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDcrCalendarExceptionList.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDcrCalendarExceptionList.func_msg);

            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Exception_Resource_Mapping
        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                  {
                      mockTSOTimePeriodEx.exceptionId = 1;
                      mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                      mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                      return mockDcrTsoListTimePeriodEx;
                  });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteResMap;
             });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });
            
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return false;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMappingWithReadAllTimePeriodsForExceptionFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });
            

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMappingWithReadAllTimePeriodsForResourceFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

        
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMappingWithDeleteTimePeriodResourceMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });
            
            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionResourceMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcResourceException.coreProj = mockCoreProj;
            mockDcResourceException.cmd_user_id = 1;
            mockDcResourceException.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcResourceException, typeof(IDcResourceException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcResourceException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcResourceException.cmd_user_id, mockDcResourceException.orgId, ENUM_Core_Function.CF_deleteOrgExceptionResourceMapping).Returns(x =>
                {
                    return true;
                });


            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });



            IDCR_Delete mockDCRDeleteResMap = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteResMap.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteResMap.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteResMap;
            });

            mockCoreDb.Delete_Exception_Resource_Mapping(mockDcResourceException.coreProj, mockDcResourceException, mockDcResourceException).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Update_Org_Exception

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgException()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            
            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();
            

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.creatorId = 1;
                 mockDcrException.orgId = 43242;
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 return mockDcrException;
             });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                 return mockDcrIdListExpResMap;
             });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                 return mockDcrIdListExpCalMap;
             });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();

            

            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            
            
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                    {
                        mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                        mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                        mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                        return mockDcrIdListResMap;
                    });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                  {
                      mockTSOTimePeriodRes.exceptionId = 1;
                      mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                      mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                      mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                      mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                      return mockDcrIdListTimePeriodRes;
                  });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteResMapEx;
             });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                   mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                   return mockDCRDeleteCalMapEx;
               });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                 mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                 return mockDCRDeleteRepMapEx;
             });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();

            
            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();
            
            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                 mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                 return mockDCRAddedRes;
             });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                 mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                 return mockDCRAddedCal;
             });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });
            

            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }
        
        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return false;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });



            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadOrgExceptionByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrException.func_msg = ServiceResponse.status_unknown;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_unknown;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_unknown;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadAllTimePeriodsForCalendarFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadAllTimePeriodsForResourceFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithDeleteAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_unknown;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithDeleteAllOrgExceptionRepeatMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_unknown;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithReadAllTimePeriodsForExceptionFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithUpdateTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRUpdate.func_msg = ServiceResponse.status_unknown;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }
        
        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCreateRepeatFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_unknown;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }
        
        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCreateOrgExceptionRepeatMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_unknown;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.Unknown;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCreateOrgExceptionResourceMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId = 1;
            listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int CalId = 1;
            //listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);


            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

           mockCoreFactory.DcResourceException(mockDcUpdateOrgException.coreProj).Returns(x => {
               return mockDcResourceException;
           });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRAddedRes.func_msg = ServiceResponse.status_unknown;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCreateOrgExceptionCalendarMappingFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRAddedCal.func_msg = ServiceResponse.status_unknown;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithResourceIdListNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId = 1;
            listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int CalId = 1;
            //listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);


            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            mockCoreFactory.DcResourceException(mockDcUpdateOrgException.coreProj).Returns(x => {
                return mockDcResourceException;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCreatorIdNotSame()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId = 1;
            listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int CalId = 1;
            //listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 2;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithOrgIdNotSame()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId = 1;
            listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int CalId = 1;
            //listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 1;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCalendarIdResourceIdListNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId = 1;
            listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.DcResourceException(mockCoreProj).Returns(x =>
            {
                return mockDcResourceException;
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithCalendarIdGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });


            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithUpdateAppointmentTypeUpdateSingleTsoid()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();
            ITSO mockITSO = Substitute.For<ITSO>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();


            List<int> listOfCalIds = Substitute.For<List<int>>();
            //int calIds = 1;
            //listOfCalIds.Add(calIds);
            List<int> listOfResIds = Substitute.For<List<int>>();
            int resids = 1;
            listOfResIds.Add(resids);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfResIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateOrgException.tsoId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            int callCount = 0;
            IList<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> listOfIInstantStartStopTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> mockListIInstantStartStopTimePeriodCollection = Substitute.For<List<IInstantStartStop>>();

            IFactoryCore mockFactoryDc = Substitute.For<IFactoryCore>();


            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (callCount == 0)
                {
                    callCount++;
                    return mockListIInstantStartStopRepeatTimePeriods;
                }
                else if (callCount == 1)
                {

                    callCount++;
                    return mockListIInstantStartStopTimePeriods;

                }
                else if (callCount == 2)
                {
                    callCount++;
                    return listOfIInstantStartStopTimePeriods;
                }
                else if (callCount == 3)
                {
                    callCount++;

                    return mockListIInstantStartStopTimePeriodCollection;
                }
                else
                {
                    callCount++;
                    return new List<IInstantStartStop>();
                }
            });

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            //IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            //mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            //IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopTimePeriods;

            });


            IDcrTsoList mockDcrTsoLisCalTSOs = Substitute.For<IDcrTsoList>();
            List<ITSO> listOfITSoCal = Substitute.For<List<ITSO>>();
            ITSO ITSoCal = Substitute.For<ITSO>();



          

            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                ITSoCal.tsoId = 1;
                listOfITSoCal.Add(ITSoCal);
                mockDcrTsoLisCalTSOs.func_msg = ServiceResponse.status_ok;
                mockDcrTsoLisCalTSOs.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoLisCalTSOs.timeScaleList = listOfITSoCal;
                return mockDcrTsoLisCalTSOs;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });

            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            List<IInstantStartStop> mockCOPY_TimePeriodCollection = Substitute.For<List<IInstantStartStop>>();
            mockUtils.COPY_TimePeriodCollection(mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                IInstantStartStop mockIInstantStartStopRepeatTimePeriodsNew = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriodsNew.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriodsNew.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockCOPY_TimePeriodCollection.Add(mockIInstantStartStopRepeatTimePeriodsNew);
                return mockCOPY_TimePeriodCollection;
            });


            IList<IInstantStartStop> conflictList = Substitute.For<List<IInstantStartStop>>();
            mockUtils.GetConflictingTimePeriods(listOfIInstantStartStopTimePeriods, mockCOPY_TimePeriodCollection).Returns(x =>
            {
                return conflictList;
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            mockCoreFactory.ListITSO().Returns(x =>
            {
                return mockListITSO;
            });

            

            IList<IInstantStartStop> convertedTso = Substitute.For<List<IInstantStartStop>>();
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {
                return convertedTso;
            });


            

            //mockUtils.CONVERT_ITSOListToInstantList()

            mockUtils.GetConflictingTimePeriods(convertedTso, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(mockListIInstantStartStopTimePeriodCollection, mockListIInstantStartStopRepeatTimePeriods).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });


            List<IInstantStartStop> mockListIInstantStartStopTimePeriod = Substitute.For<List<IInstantStartStop>>();
            IInstantStartStop mockIInstantStartStopTimePeriod = Substitute.For<IInstantStartStop>();
            mockIInstantStartStopTimePeriod.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
            mockIInstantStartStopTimePeriod.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
            mockListIInstantStartStopTimePeriod.Add(mockIInstantStartStopTimePeriod);
            mockUtils.CONVERT_ITSOListToInstantList(mockListITSO).Returns(x =>
            {

                return mockListIInstantStartStopTimePeriod;
            });





            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithUpdateAppointmentTypeUpdateSingleTsoid_ReadTSoFuncStatuNotOk()
        {

            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateOrgException.tsoId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTSO.func_msg = ServiceResponse.status_unknown;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });


            mockUtils.CONVERT_ITSOListToInstantList(Arg.Any<List<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithUpdateAppointmentTypeUpdateAllAfterTsoid()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Update_All_After_Tsoid;
            mockDcUpdateOrgException.tsoId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });


            mockUtils.CONVERT_ITSOListToInstantList(Arg.Any<List<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_UpdateOrgExceptionWithUpdateAppointmentTypeNotSet()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interfaces
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcUpdateOrgException mockDcUpdateOrgException = Substitute.For<IDcUpdateOrgException>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IDcResourceId mockDcResourceId = Substitute.For<IDcResourceId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();

            ISC_Org_Repeat mockSCOrgRepeat = Substitute.For<ISC_Org_Repeat>();
            IDcMapRepeatException mockDcMapRepeatException = Substitute.For<IDcMapRepeatException>();
            IDcResourceException mockDcResourceException = Substitute.For<IDcResourceException>();
            IDcCreateRepeat mockDcCreateRepeat = Substitute.For<IDcCreateRepeat>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            ISC_Org_Resources mockSCOrgResources = Substitute.For<ISC_Org_Resources>();
            IDcTsos mockDcTsos = Substitute.For<IDcTsos>();
            IDCResourceTimeRange mockDCResourceTimeRange = Substitute.For<IDCResourceTimeRange>();
            IDcRepeatId mockDcRepeatId = Substitute.For<IDcRepeatId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            IResourceTimeRange mockResourceTimeRange = Substitute.For<IResourceTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IListOfOrgTsoCalendarIds mockIListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcUpdateTSO mockDcUpdateTSO = Substitute.For<IDcUpdateTSO>();


            List<int> listOfRepIds = Substitute.For<List<int>>();
            //int RepId = 1;
            //listOfRepIds.Add(RepId);

            List<int> listOfCalIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalIds.Add(CalId);

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);

            mockDcUpdateOrgException.resourceIdList = listOfRepIds;
            mockDcUpdateOrgException.calendarIdList = listOfCalIds;
            mockDcUpdateOrgException.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateOrgException.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateOrgException.timeZoneIANA = "America/Boise";

            mockDcUpdateOrgException.repeatRuleOptions = mockListRepeatOptions;
            mockDcUpdateOrgException.coreProj = mockCoreProj;
            mockDcUpdateOrgException.cmd_user_id = 1;
            mockDcUpdateOrgException.creatorId = 1;
            mockDcUpdateOrgException.orgId = 43242;
            mockDcUpdateOrgException.exceptionId = 1;
            //mockDcUpdateOrgException.updateExceptionType = ENUM_Repeat_UpdateType.Unknown;
            mockDcUpdateOrgException.tsoId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgException, typeof(IDcUpdateOrgException)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcUpdateOrgException.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcUpdateOrgException.cmd_user_id, mockDcUpdateOrgException.orgId, ENUM_Core_Function.CF_updateOrgException).Returns(x =>
                {
                    return true;
                });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.creatorId = 1;
                mockDcrException.orgId = 43242;
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListExpResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpResMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpResMap;
            });

            IDcrIdList mockDcrIdListExpCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListExpCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListExpCalMap.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListExpCalMap;
            });

            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            mockUtils.GenerateRepeatTimePeriods(mockDcUpdateOrgException.coreProj, mockCoreSc, mockTimeStartEnd, mockDcUpdateOrgException.repeatRuleOptions[0], mockDcUpdateOrgException.timeZoneIANA, true, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                List<IInstantStartStop> mockListIInstantStartStopRepeatTimePeriods = Substitute.For<List<IInstantStartStop>>();
                IInstantStartStop mockIInstantStartStopRepeatTimePeriods = Substitute.For<IInstantStartStop>();
                mockIInstantStartStopRepeatTimePeriods.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.start).Value;
                mockIInstantStartStopRepeatTimePeriods.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateOrgException.end).Value;
                mockListIInstantStartStopRepeatTimePeriods.Add(mockIInstantStartStopRepeatTimePeriods);
                return mockListIInstantStartStopRepeatTimePeriods;
            });


            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();


            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });

            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodRes = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodRes = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodRes.exceptionId = 1;
                mockListTSOTimePeriodRes.Add(mockTSOTimePeriodRes);
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                mockDcrIdListTimePeriodRes.timeScaleList = mockListTSOTimePeriodRes;
                return mockDcrIdListTimePeriodRes;
            });

            IDCR_Delete mockDCRDeleteResMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteResMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteResMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteResMapEx;
            });

            IDCR_Delete mockDCRDeleteCalMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteCalMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteCalMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteCalMapEx;
            });

            IDCR_Delete mockDCRDeleteRepMapEx = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRDeleteRepMapEx.func_msg = ServiceResponse.status_ok;
                mockDCRDeleteRepMapEx.func_status = ENUM_Cmd_Status.ok;
                return mockDCRDeleteRepMapEx;
            });

            mockCoreDb.Update_ExceptionOptions(mockDcUpdateOrgException.coreProj, mockDcUpdateOrgException).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });



            IDCR_Update mockDCRUpdate = Substitute.For<IDCR_Update>();


            mockCoreSc.Update_TimePeriod(mockDcUpdateTSO, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRUpdate.func_status = ENUM_Cmd_Status.ok;
                mockDCRUpdate.func_msg = ServiceResponse.status_ok;
                return mockDCRUpdate;
            });

            IDCR_Added mockDCRAddedCreateRep = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Repeat(mockDcCreateRepeat, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCreateRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedCreateRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedCreateRep;
            });


            IDCR_Added mockDCRAddedRep = Substitute.For<IDCR_Added>();

            mockCoreSc.Create_Org_Exception_Repeat_Map(mockDcMapRepeatException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRep.func_msg = ServiceResponse.status_ok;
                mockDCRAddedRep.func_status = ENUM_Cmd_Status.ok;
                return mockDCRAddedRep;
            });

            IDCR_Added mockDCRAddedRes = Substitute.For<IDCR_Added>();
            mockCoreSc.Create_Org_Exception_Resource_Mapping(mockDcResourceException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedRes.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedRes;
            });

            IDCR_Added mockDCRAddedCal = Substitute.For<IDCR_Added>();


            mockCoreSc.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDCRAddedCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRAddedCal.func_msg = ServiceResponse.status_ok;
                return mockDCRAddedCal;
            });

            mockUtils.COPY_TimePeriodCollection(Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IList<IInstantStartStop>>(), Arg.Any<List<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });


            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.TimeStartEnd().Returns(x =>
            {
                return mockTimeStartEnd;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcUpdateTSO(mockCoreProj).Returns(x =>
            {
                return mockDcUpdateTSO;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcMapRepeatException(mockCoreProj).Returns(x =>
            {
                return mockDcMapRepeatException;
            });

            mockCoreFactory.DcCreateRepeat(mockCoreProj).Returns(x =>
            {
                return mockDcCreateRepeat;
            });

            mockCoreFactory.DcCalendarExceptionId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarExceptionId;
            });

            IDcrTSO mockDcrTSO = Substitute.For<IDcrTSO>();
            mockCoreSc.Read_TSo(mockDcTsoId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrTSO.func_status = ENUM_Cmd_Status.ok;
                mockDcrTSO.func_msg = ServiceResponse.status_ok;
                mockDcrTSO.tsoId = 1;
                mockDcrTSO.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrTSO.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrTSO;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });


            mockUtils.CONVERT_ITSOListToInstantList(Arg.Any<List<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            IDCR_Update IDCRUpdate = scOrgExceptions.Update_Org_Exception(mockDcUpdateOrgException, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Update_Result.Not_Updated, IDCRUpdate.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRUpdate.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRUpdate.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region  Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionRepeatMappingsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionRepeatMappings).Returns(x =>
                {
                    return true;
                });
            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId;
            RepId = 1;

            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfRepIds;
            });
            mockCoreDb.Read_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID,  listOfRepIds).Returns(x =>
            {

                listOfRepIds.Add(RepId);
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionRepeatMappingsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionRepeatMappings).Returns(x =>
                {
                    return true;
                });
            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId;
            RepId = 1;

            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfRepIds;
            });
            mockCoreDb.Read_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID,  listOfRepIds).Returns(x =>
            {

                listOfRepIds.Add(RepId);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------


            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionRepeatMappingsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionRepeatMappings).Returns(x =>
                {
                    return false;
                });
            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId;
            RepId = 1;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfRepIds;
            });
            mockCoreDb.Read_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID,  listOfRepIds).Returns(x =>
            {

                listOfRepIds.Add(RepId);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------


            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionRepeatMappingsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_readAllExceptionRepeatMappings).Returns(x =>
                {
                    return true;
                });
            List<int> listOfRepIds = Substitute.For<List<int>>();
            int RepId;
            RepId = 1;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfRepIds;
            });
            mockCoreDb.Read_Exception_Repeat_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID,  listOfRepIds).Returns(x =>
            {

                listOfRepIds.Add(RepId);
               
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_Repeat_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------


            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID
        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
             {
                 mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                 return mockDCRDeleteCal;
             });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return false;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }


        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithReadAllTimePeriodsForCalendarFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                       mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithDeleteTimePeriodResourceMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithDeleteTimePeriodCalendarMapFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();

            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.Unknown;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_unknown;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllOrgExceptionCalendarMappingsByExceptionIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();

            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();

            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IDcTSOCalendarId mockDcTSOCalendarId = Substitute.For<IDcTSOCalendarId>();

            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcTSOResourceId mockDcTSOResourceId = Substitute.For<IDcTSOResourceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 1;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcTSOResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOResourceId;
            });

            mockCoreFactory.DcTSOCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcTSOCalendarId;
            });

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionID.cmd_user_id, mockDcExceptionID.orgId, ENUM_Core_Function.CF_deleteAllExceptionCalendarMappingsByExceptionID).Returns(x =>
                {
                    return true;
                });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int CalId = 1;
            listOfCalMapIds.Add(CalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });
            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });

            IDCR_Delete mockDCRDeleteRes = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Resource_Map(mockDcTSOResourceId,mockCoreDb).Returns(x =>
            {
                mockDCRDeleteRes.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteRes.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteRes;
            });

            IDCR_Delete mockDCRDeleteCal = Substitute.For<IDCR_Delete>();
            mockCoreSc.Delete_TimePeriod_Calendar_Map(mockDcTSOCalendarId, mockCoreDb).Returns(x =>
            {
                mockDCRDeleteCal.func_status = ENUM_Cmd_Status.ok;
                mockDCRDeleteCal.func_msg = ServiceResponse.status_ok;
                return mockDCRDeleteCal;
            });

            mockCoreDb.Delete_All_Exception_Calendar_Mappings(mockDcExceptionID.coreProj, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Exception_Calendar_Mapping
        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();

            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       listOfExTSoIds.Add(ExTSoId);
                       mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                       mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                       mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                       return mockDcrIdListExTSoIds;
                   });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });
            

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
              {
                  listOfCalTSosIds.Add(CalTSosId);
                  mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                  mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                  mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                  return mockDcrIdListCalTSos;
              });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });



            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return false;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;

            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfExTSoIds.Add(ExTSoId);
                   mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                   return mockDcrIdListExTSoIds;
               });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
            {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMappingWithReadOrgCalendarTSOsByCalendarIDAndTimeRangeFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();

            
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_unknown;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.Unknown;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMappingWithReadAllOrgExceptionTSoIdsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMappingWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.Unknown;
                 mockDCRDelete.func_msg = ServiceResponse.status_unknown;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionCalendarMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarTimeRange mockDcCalendarTimeRange = Substitute.For<IDcCalendarTimeRange>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });

            mockCoreFactory.DcCalendarTimeRange(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarTimeRange;
            });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
              {
                  return true;
              });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_deleteExceptionCalendarMapping).Returns(x =>
                {
                    return true;
                });

            IDcrIdList mockDcrIdListCalTSos = Substitute.For<IDcrIdList>();
            List<int> listOfCalTSosIds = Substitute.For<List<int>>();
            int CalTSosId = 1;
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_TSOs_By_Calendar_ID_And_TimeRange(mockDcCalendarTimeRange, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   listOfCalTSosIds.Add(CalTSosId);
                   mockDcrIdListCalTSos.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListCalTSos.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListCalTSos.ListOfIDs = listOfCalTSosIds;
                   return mockDcrIdListCalTSos;
               });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Calendar_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcExceptionID).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });


            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region  Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID
        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsFilterByRepeatID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcExceptionRepeatId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoId;
            TsoId = 1;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfTsoIds;
            });

            mockCoreDb.Read_All_TimePeriod_Exception_Repeat_Maps(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId.exceptionId, mockDcExceptionRepeatId.repeatId,  listOfTsoIds).Returns(x =>
           {
               listOfTsoIds.Add(TsoId);
               
               return ENUM_DB_Status.DB_SUCCESS;
           });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(1, IDcrIdList.ListOfIDs[0]);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsFilterByRepeatIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT; ;
            mockDcExceptionRepeatId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return false;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoId;
            TsoId = 1;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfTsoIds;
            });

            mockCoreDb.Read_All_TimePeriod_Exception_Repeat_Maps(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId.exceptionId, mockDcExceptionRepeatId.repeatId,  listOfTsoIds).Returns(x =>
            {
                listOfTsoIds.Add(TsoId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsFilterByRepeatIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoId;
            TsoId = 1;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfTsoIds;
            });

            mockCoreDb.Read_All_TimePeriod_Exception_Repeat_Maps(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId.exceptionId, mockDcExceptionRepeatId.repeatId,  listOfTsoIds).Returns(x =>
            {
                listOfTsoIds.Add(TsoId);
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDcrIdList.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_ReadAllOrgExceptionTSoIdsFilterByRepeatIDWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcExceptionRepeatId.orgId = 43242;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
              {
                  return true;
              });

            List<int> listOfTsoIds = Substitute.For<List<int>>();
            int TsoId;
            TsoId = 1;
            mockCoreFactory.ListInt().Returns(x =>
            {
                return listOfTsoIds;
            });
            mockCoreDb.Read_All_TimePeriod_Exception_Repeat_Maps(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId.exceptionId, mockDcExceptionRepeatId.repeatId,  listOfTsoIds).Returns(x =>
            {
                listOfTsoIds.Add(TsoId);
                
                return ENUM_DB_Status.DB_FAIL;
            });


            IDcrIdList IDcrIdList = scOrgExceptions.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDcrIdList.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDcrIdList.func_msg);
            //---------- Assert----------------
        }
        #endregion

        #region Delete_Org_Exception_Repeat_Map
        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMap()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();

            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
              {
                  mockDcrException.func_msg = ServiceResponse.status_ok;
                  mockDcrException.func_status = ENUM_Cmd_Status.ok;
                  return mockDcrException;
              });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_ok;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.ok;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMapWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return false;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrException;
             });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_ok;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.ok;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMapWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return false;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrException;
             });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_ok;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.ok;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMapWithReadOrgExceptionOptionsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_msg = ServiceResponse.status_unknown;
                 mockDcrException.func_status = ENUM_Cmd_Status.Unknown;
                 return mockDcrException;
             });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_ok;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.ok;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMapWithReadAllOrgExceptionTSoIdsFilterByRepeatIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrException;
             });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_unknown;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.Unknown;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMapWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrException;
             });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_ok;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.ok;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.Unknown;
                 mockDCRDelete.func_msg = ServiceResponse.status_unknown;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteOrgExceptionRepeatMapWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionRepeatId mockDcExceptionRepeatId = Substitute.For<IDcExceptionRepeatId>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcExceptionRepeatId.coreProj = mockCoreProj;
            mockDcExceptionRepeatId.cmd_user_id = 1;
            mockDcExceptionRepeatId.orgId = 43242;
            mockDcExceptionRepeatId.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            mockValid.Is_Valid(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionRepeatId, typeof(IDcExceptionRepeatId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcExceptionRepeatId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcExceptionRepeatId.cmd_user_id, mockDcExceptionRepeatId.orgId, ENUM_Core_Function.CF_deleteOrgExceptionRepeatMap).Returns(x =>
                {
                    return true;
                });
            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrException;
             });

            IDcrIdList IDcrIdListRepTSOIds = Substitute.For<IDcrIdList>();
            List<int> listOfRepTSOIds = Substitute.For<List<int>>();
            int RepTSOId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_Filter_By_Repeat_ID(mockDcExceptionRepeatId, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 listOfRepTSOIds.Add(RepTSOId);
                 IDcrIdListRepTSOIds.func_msg = ServiceResponse.status_ok;
                 IDcrIdListRepTSOIds.func_status = ENUM_Cmd_Status.ok;
                 IDcrIdListRepTSOIds.ListOfIDs = listOfRepTSOIds;
                 return IDcrIdListRepTSOIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            mockCoreDb.Delete_Exception_Repeat_Mapping(mockDcExceptionRepeatId.coreProj, mockDcExceptionRepeatId, mockDcExceptionRepeatId).Returns(x =>
            {
                return ENUM_DB_Status.DB_FAIL;
            });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_Org_Exception_Repeat_Map(mockDcExceptionRepeatId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Delete_All_Exception_TSO_Mappings_By_Exception_ID

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllExceptionTSOMappingsByExceptionID()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------



            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.Deleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllExceptionTSOMappingsByExceptionIDWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return false;
             });


            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllExceptionTSOMappingsByExceptionIDWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = 2;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllExceptionTSOMappingsByExceptionIDWithReadAllOrgExceptionTSoIdsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.Unknown;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_unknown;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.ok;
                 mockDCRDelete.func_msg = ServiceResponse.status_ok;
                 return mockDCRDelete;
             });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_DeleteAllExceptionTSOMappingsByExceptionIDWithDeleteTimePeriodFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcExceptionID.coreProj = mockCoreProj;
            mockDcExceptionID.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcExceptionID.orgId = 43242;
            mockDcExceptionID.exceptionId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockValid.Is_Valid(mockDcExceptionID.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcExceptionID, typeof(IDcExceptionID)).Returns(x =>
             {
                 return true;
             });

            mockCoreFactory.DcTsoId(mockCoreProj).Returns(x =>
            {
                return mockDcTsoId;
            });

            IDcrIdList mockDcrIdListExTSoIds = Substitute.For<IDcrIdList>();
            List<int> listOfExTSoIds = Substitute.For<List<int>>();
            int ExTSoId = 1;
            mockCoreSc.Read_All_Org_Exception_TSoIds_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 listOfExTSoIds.Add(ExTSoId);
                 mockDcrIdListExTSoIds.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListExTSoIds.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListExTSoIds.ListOfIDs = listOfExTSoIds;
                 return mockDcrIdListExTSoIds;
             });

            IDCR_Delete mockDCRDelete = Substitute.For<IDCR_Delete>();
                        mockCoreSc.Delete_TimePeriod(mockDcTsoId, mockCoreSc, mockCoreDb).Returns(x =>
             {
                 mockDCRDelete.func_status = ENUM_Cmd_Status.Unknown;
                 mockDCRDelete.func_msg = ServiceResponse.status_unknown;
                 return mockDCRDelete;
             });

            IDCR_Delete IDCRDelete = scOrgExceptions.Delete_All_Exception_TSO_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Delete_State.NotDeleted, IDCRDelete.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRDelete.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRDelete.func_msg);
            //---------- Assert----------------
        }

        #endregion

        #region Create_Org_Exception_Calendar_Mapping
        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMapping()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
             {
                 return true;
             });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrException.func_status = ENUM_Cmd_Status.ok;
                 mockDcrException.func_msg = ServiceResponse.status_ok;
                 mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                 mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                 return mockDcrException;
             });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                 return mockDcrIdListResMapEx;
             });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID,  mockValid, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
             {
                 mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                 mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                 mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                 return mockDcrIdListCalMap;
             });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                       {
                           mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                           mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                           return mockDcrCalendar;
                       });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                  {
                      mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                      mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                      mockTSOTimePeriodEx.exceptionId = 1;
                      mockTSOTimePeriodEx.tsoId = 1;
                      mockTSOTimePeriodEx.repeatId = 1;
                      mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                      mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                      mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                      mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                      return mockDcrTsoListTimePeriodEx;
                  });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
              {
                  mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                  mockDcrOrg.func_msg = ServiceResponse.status_ok;
                  return mockDcrOrg;
              });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
               {
                   mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                   mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                   mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                   return mockDcrIdListResMap;
               });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();
            

            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                   {
                       mockITSO.tsoId = 1;
                       mockITSO.exceptionId = 1;
                       mockListITSO.Add(mockITSO);
                       mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                       mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                       mockDcrTsoList.timeScaleList = mockListITSO;
                       return mockDcrTsoList;
                   });
            
            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
                {
                    mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                    mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                    return mockDcrAddedList;
                });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId,  newMappingID).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            

            


            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory);
            


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.ok, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_ok, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithInvalidParameter()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return false;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithPermissionDenied()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return false;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.permission_denied, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_permission_denied, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadOrgExceptionOptionsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrException.func_msg = ServiceResponse.status_unknown;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadAllOrgExceptionResourceMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

         

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadAllOrgExceptionCalendarMappingsByExceptionIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadOrgCalendarByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrCalendar.func_msg = ServiceResponse.status_unknown;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadAllTimePeriodsForExceptionFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadOrgByOrgIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrOrg.func_msg = ServiceResponse.status_unknown;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadAllOrgCalendarResourceMappingsByCalendarIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_unknown;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadAllTimePeriodsForResourceFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_unknown;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithReadAllTimePeriodsForCalendarFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.Unknown;
                mockDcrTsoList.func_msg = ServiceResponse.status_unknown;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithCreateTimePeriodCalendarMapsFuncStatusNotOk()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_unknown;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.Unknown;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.Unknown, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.status_unknown, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithServerError()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.server_error, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_server_error, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithGetConflictingTimePeriodsNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();
           
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            ListIInstantStartStop.Add(mockIInstantStartStop);

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return ListIInstantStartStop;
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }

        [TestMethod]
        public void SC_Org_Exceptions_CreateOrgExceptionCalendarMappingWithGetConflictingTimePeriodsSecondNotZero()
        {
            // ---------- Arrange--------------
            SC_Org_Exceptions scOrgExceptions = new SC_Org_Exceptions();

            //Creating Substitute of interface
            ICoreProject mockCoreProj = Substitute.For<ICoreProject>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IValidation mockValid = Substitute.For<IValidation>();
            IDcCalendarExceptionId mockDcCalendarExceptionId = Substitute.For<IDcCalendarExceptionId>();
            IDcCalendarId mockDcCalendarId = Substitute.For<IDcCalendarId>();
            ISC_TSO mockSCTSO = Substitute.For<ISC_TSO>();
            IDcExceptionID mockDcExceptionID = Substitute.For<IDcExceptionID>();
            IDcOrgResourceId mockDcOrgResourceId = Substitute.For<IDcOrgResourceId>();
            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            IDcResourceTSO mockDcResourceTSO = Substitute.For<IDcResourceTSO>();
            ITsoResourceId mockTsoResourceId = Substitute.For<ITsoResourceId>();
            IListOfOrgTsoCalendarIds mockListOfOrgTsoCalendarIds = Substitute.For<IListOfOrgTsoCalendarIds>();
            IDcCalendarsTSOs mockDcCalendarsTSOs = Substitute.For<IDcCalendarsTSOs>();
            ITsoOrgCalendarId mockOrgTsoCalendarId = Substitute.For<ITsoOrgCalendarId>();
            IDcTsoId mockDcTsoId = Substitute.For<IDcTsoId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            //mockDcCalendarsTSOs.listOfTSOOrgCalendarIds = Substitute.For<>

            mockDcCalendarExceptionId.coreProj = mockCoreProj;
            mockDcCalendarExceptionId.cmd_user_id = 1;
            mockDcCalendarExceptionId.orgId = 43242;
            mockDcCalendarExceptionId.exceptionId = 1;
            mockDcCalendarExceptionId.calendarId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IInstantStartStop> currentExceptionTimePeriods = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> resTSOS = Substitute.For<List<IInstantStartStop>>();
            List<IInstantStartStop> ListIInstantStartStop = Substitute.For<List<IInstantStartStop>>();

            int countListIInstantStartStop = 0;

            mockCoreFactory.ListInstantStartStop().Returns(x =>
            {
                if (countListIInstantStartStop == 0)
                {
                    return currentExceptionTimePeriods;
                }
                else if (countListIInstantStartStop == 1)
                {
                    return resTSOS;
                }
                else if (countListIInstantStartStop == 2)
                {
                    return ListIInstantStartStop;
                }
                else
                {
                    return new List<IInstantStartStop>();
                }
            });

            int count = 0;
            IInstantStartStop currentExceptionTimePeriodsIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop resTSOSIInstantStartStop = Substitute.For<IInstantStartStop>();
            IInstantStartStop exceptionTrIInstantStartStop = Substitute.For<IInstantStartStop>();

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                if (count == 0)
                {
                    return currentExceptionTimePeriodsIInstantStartStop;
                }
                else if (count == 1)
                {
                    return resTSOSIInstantStartStop;
                }
                else if (count == 2)
                {
                    return exceptionTrIInstantStartStop;
                }
                else
                {
                    return exceptionTrIInstantStartStop;
                }
            });

            ITsoOrgCalendarId mockTsoOrgCalendarId = Substitute.For<ITsoOrgCalendarId>();

            mockCoreFactory.TsoOrgCalendarId().Returns(x =>
            {
                return mockTsoOrgCalendarId;
            });


            mockValid.Is_Valid(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCalendarExceptionId, typeof(IDcCalendarExceptionId)).Returns(x =>
            {
                return true;
            });

            mockValid.Permissions_User_Can_Do_Core_Action(mockDcCalendarExceptionId.coreProj, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,
                mockDcCalendarExceptionId.cmd_user_id, mockDcCalendarExceptionId.orgId, ENUM_Core_Function.CF_createCalendarExceptionMapping).Returns(x =>
                {
                    return true;
                });

            IDcrException mockDcrException = Substitute.For<IDcrException>();
            mockCoreSc.Read_Org_Exception_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrException.func_status = ENUM_Cmd_Status.ok;
                mockDcrException.func_msg = ServiceResponse.status_ok;
                mockDcrException.start = "2017-01-13T10:02:59.0000000Z";
                mockDcrException.end = "2017-01-13T10:07:59.0000000Z";
                return mockDcrException;
            });

            IDcrIdList mockDcrIdListResMapEx = Substitute.For<IDcrIdList>();
            List<int> listOfResMapExIds = Substitute.For<List<int>>();
            int ResMapExId;
            mockCoreSc.Read_All_Org_Exception_Resource_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                //ResMapExId = 1;
                //listOfResMapExIds.Add(ResMapExId);
                mockDcrIdListResMapEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMapEx.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMapEx.ListOfIDs = listOfResMapExIds;
                return mockDcrIdListResMapEx;
            });


            List<int> listOfCalMapIds = Substitute.For<List<int>>();
            int ResCalId = 1;
            listOfCalMapIds.Add(ResCalId);
            IDcrIdList mockDcrIdListCalMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Exception_Calendar_Mappings_By_Exception_ID(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListCalMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListCalMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListCalMap.ListOfIDs = listOfCalMapIds;
                return mockDcrIdListCalMap;
            });

            IDcrCalendar mockDcrCalendar = Substitute.For<IDcrCalendar>();
            IDatabaseOperations_Calendars mockDatabaseOperationsCalendars = Substitute.For<IDatabaseOperations_Calendars>();
            mockCoreSc.Read_Org_Calendar_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrCalendar.func_status = ENUM_Cmd_Status.ok;
                mockDcrCalendar.func_msg = ServiceResponse.status_ok;
                return mockDcrCalendar;
            });

            IDcrTsoList mockDcrTsoListTimePeriodEx = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListTSOTimePeriodEx = Substitute.For<List<ITSO>>();
            ITSO mockTSOTimePeriodEx = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Exception(mockDcExceptionID, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockTSOTimePeriodEx.start = "2017-01-13T10:02:59.0000000Z";
                mockTSOTimePeriodEx.end = "2017-01-13T10:07:59.0000000Z";
                mockTSOTimePeriodEx.exceptionId = 1;
                mockTSOTimePeriodEx.tsoId = 1;
                mockTSOTimePeriodEx.repeatId = 1;
                mockListTSOTimePeriodEx.Add(mockTSOTimePeriodEx);
                mockDcrTsoListTimePeriodEx.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoListTimePeriodEx.func_msg = ServiceResponse.status_ok;
                mockDcrTsoListTimePeriodEx.timeScaleList = mockListTSOTimePeriodEx;
                return mockDcrTsoListTimePeriodEx;
            });
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IDcrOrg mockDcrOrg = Substitute.For<IDcrOrg>();

            mockCoreSc.Read_Org_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrOrg.func_status = ENUM_Cmd_Status.ok;
                mockDcrOrg.func_msg = ServiceResponse.status_ok;
                return mockDcrOrg;
            });

            List<int> listOfResMapIds = Substitute.For<List<int>>();
            int ResId = 1;
            listOfResMapIds.Add(ResId);
            IDcrIdList mockDcrIdListResMap = Substitute.For<IDcrIdList>();
            mockCoreSc.Read_All_Org_Calendar_Resource_Mappings_By_Calendar_ID(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListResMap.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListResMap.func_msg = ServiceResponse.status_ok;
                mockDcrIdListResMap.ListOfIDs = listOfResMapIds;
                return mockDcrIdListResMap;
            });


            IDcrTsoList mockDcrIdListTimePeriodRes = Substitute.For<IDcrTsoList>();


            mockCoreSc.Read_All_TimePeriods_For_Resource(mockDcOrgResourceId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrIdListTimePeriodRes.func_status = ENUM_Cmd_Status.ok;
                mockDcrIdListTimePeriodRes.func_msg = ServiceResponse.status_ok;
                return mockDcrIdListTimePeriodRes;
            });

            IDcrTsoList mockDcrTsoList = Substitute.For<IDcrTsoList>();
            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            ITSO mockITSO = Substitute.For<ITSO>();
            mockCoreSc.Read_All_TimePeriods_For_Calendar(mockDcCalendarId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockITSO.tsoId = 1;
                mockITSO.exceptionId = 1;
                mockListITSO.Add(mockITSO);
                mockDcrTsoList.func_status = ENUM_Cmd_Status.ok;
                mockDcrTsoList.func_msg = ServiceResponse.status_ok;
                mockDcrTsoList.timeScaleList = mockListITSO;
                return mockDcrTsoList;
            });

            ListIInstantStartStop.Add(mockIInstantStartStop);

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<IInstantStartStop>>()).Returns(x =>
            {
                return new List<IInstantStartStop>();
            });

            mockUtils.GetConflictingTimePeriods(Arg.Any<IInstantStartStop>(), Arg.Any<IList<ITSO>>()).Returns(x =>
            {
                return ListIInstantStartStop; 
            });

            List<ITimeStartEnd> mockListTimeStartEnd = Substitute.For<List<ITimeStartEnd>>();
            IDcrAddedList mockDcrAddedList = Substitute.For<IDcrAddedList>();

            mockCoreSc.Create_TimePeriod_Calendar_Maps(mockDcCalendarsTSOs, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrAddedList.func_msg = ServiceResponse.status_ok;
                mockDcrAddedList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrAddedList;
            });
            INewRecordId newMappingID = Substitute.For<INewRecordId>();
            newMappingID.NewRecordID = 1;
            mockCoreFactory.NewRecordId().Returns(x =>
            {
                return newMappingID;
            });
            mockCoreDb.Create_Calendar_Exception_Mapping(mockDcCalendarExceptionId.coreProj, mockDcCalendarExceptionId, mockDcCalendarExceptionId, newMappingID).Returns(x =>
            {

                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.DcExceptionID(mockCoreProj).Returns(x =>
            {
                return mockDcExceptionID;
            });


            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });


            mockCoreFactory.DcOrgId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.DcCalendarId(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarId;
            });

            mockCoreFactory.DcOrgResourceId(mockCoreProj).Returns(x =>
            {
                return mockDcOrgResourceId;
            });

            mockCoreFactory.DcCalendarsTSOs(mockCoreProj).Returns(x =>
            {
                return mockDcCalendarsTSOs;
            });

            IDCR_Added IDCRAdded = scOrgExceptions.Create_Org_Exception_Calendar_Mapping(mockDcCalendarExceptionId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(ENUM_Cmd_Add_Result.Not_Added, IDCRAdded.Result);
            Assert.AreEqual(ENUM_Cmd_Status.invalid_parameter, IDCRAdded.func_status);
            Assert.AreEqual(ServiceResponse.error_parameter_invalid, IDCRAdded.func_msg);
            //---------- Assert----------------
        }
        #endregion
    }
}



